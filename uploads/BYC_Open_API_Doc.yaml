---
openapi: 3.0.0
servers:
- url: /api
components:
  parameters:
    username:
      description: Username
      in: path
      name: username
      required: true
      schema:
        type: string
    sport_name:
      description: Sport name
      in: path
      name: sport_name
      required: true
      schema:
        type: string
    court_no:
      description: Court number
      in: path
      name: court_no
      required: true
      schema:
        type: integer
    input_date:
      description: Input date
      in: query
      name: input_date
      required: true
      schema:
        type: string
    book_id:
      description: Booking Id
      in: path
      name: book_id
      required: true
      schema:
        type: integer
  schemas:
    User:
      properties:
        username:
          description: Username
          type: string
        pwd:
          description: Password
          type: string
        fname:
          description: First name
          type: string
        lname:
          description: Last name
          type: string
        phone:
          description: Phone number
          type: string
        addr:
          description: Address
          type: string
        email:
          description: Email
          type: string
      required:
      - username
      - pwd
      - email
      type: object
    Sport:
      properties:
        name:
          description: Sport name
          type: string
      required:
      - name
      type: object
    Court:
      properties:
        sport_name:
          description: Sport name
          type: string
        court_no:
          description: Court number
          type: string
        date:
          description: Shift date
          type: string
        free_slots:
          description: Available time slots for a court
          type: string
      required:
      - sport_name
      - court_no
      - date
      type: object
    Reservations:
      description: request schema to get all reservations of one user
      properties:
        court_id:
          description: Court Id
          type: string
        start:
          description: Shift starting time
          type: string
        end:
          description: Shift end time
          type: string
      required:
        - court_id
        - start
        - end
      type: object
    Reservation:
      description: request schema to add a new reservation
      properties:
        book_id:
          description: Booking Id
          type: string
        username:
          description: Username
          type: string
        court_id:
          description: Court Id
          type: string
        start:
          description: Shift starting time
          type: string
        end:
          description: Shift end time
          type: string
      required:
        - username
        - court_id
        - start
        - end
      type: object
    Freeslot:
      description: request schema to add a update freeslot of a court
      properties:
        date:
          description: Date selected by user
          type: string
        start:
          description: Shift starting time
          type: string
        end:
          description: Shift end time
          type: string
      required:
        - username
        - court_id
        - start
        - end
      type: object

info:
  title: Book Your Court API documentation
  version: 1.0.0
  description: Documentation of BYC APIs
  contact:
    url: "https://github.com/tuminguyen/PWP/wiki"
    email: "bookyourcourt.info@gmail.com"
    name: BYC Team
paths:
  /users/:
    get:
      description: Get all users
      responses:
        '200':
          description: Success response
          content:
            application/json:
              example:
                - username: "VandanaSimmi"
                  pwd: "Abc12345&"
                  fname: "Vandana"
                  lname: "Yadav"
                  phone: "+358435678446"
                  addr: "AB Street, Oulu, Finland"
                  email: "vanmj80@gmail.com"
                - Username: "tuminguyen"
                  pwd: "CVB12345%"
                  fname: "Huong"
                  lname: "Nguyen"
                  phone: "+358435671246"
                  addr: "TP Street, Oulu, Finland"
                  email: "tumi.nguyen@gmail.com"
        '405':
          description: GET method required
    post:
      description: add new user
      requestBody:
        description: JSON for a new product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: "AB"
              pwd: "Abc12345@"
              email: "abc@gmail.com"
      responses:
        '200':
          description: User account successfully added to the database
        '409':
          description: Username or email already exists
        '401':
          description: Incomplete request - missing fields
        '405':
          description: POST method required
  /users/{username}/:
    get:
      description: Get user by username
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              example:
                username: "VandanaSimmi"
                pwd: "Abc12345&"
                fname: "Vandana"
                lname: "Yadav"
                phone: "+358435678446"
                addr: "AB Street, Oulu, Finland"
                email: "vanmj80@gmail.com"
                reservations:
                  - book_id: 1
                    start: "17:00"
                    end: "19:00"
                    court_info:
                      court_no: 5
                      date: "2022-04-13"
                      sport:  "badminton"
                  - book_id: 2
                    start: "13:00"
                    end: "14:00"
                    court_info:
                      court_no: 3
                      date: "2022-04-14"
                      sport: "tennis"
        '405':
          description: GET method required
        '409':
          description: Username not found
    put:
      description: edit user profile
      parameters:
        - $ref: '#/components/parameters/username'
      requestBody:
        description: JSON for a new product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              fname: "Anita"
              lname: "Mehra"
      responses:
        '200':
          description: User profile updated successfully
        '409':
          description: Username not found
        '405':
          description: PUT method required
    delete:
      description: Delete user by username
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Deleted successfully
        '405':
          description: DELETE method required
        '409':
          description: Username not found
  /sports/:
    get:
      description: Get all sports
      responses:
        '200':
          description: Success response
          content:
            application/json:
              example:
                - id: 1
                  name: "basketball"
                  courts:
                      - court_no: 1
                        date: "2022-04-15"
                        sport:  "basketball"
                        id: 1
                        free_slots: "7:00,8:00,9:00,15:00"
                      - court_no: 2
                        date: "2022-04-16"
                        sport:  "basketball"
                        id: 2
                        free_slots: "8:00,9:00,10:00,15:00,22:00"
                - id: 2
                  name: "badminton"
                  courts:
                      - court_no: 1
                        date: "2022-04-16"
                        sport:  "badminton"
                        id: 3
                        free_slots: "7:00,8:00,11:00,15:00,16:00,21:00"
                      - court_no: 2
                        date: "2022-04-17"
                        sport:  "badminton"
                        id: 4
                        free_slots: "12:00,13:00,15:00,18:00"
                - id: 3
                  name: "tennis"
                  courts:
                      - court_no: 1
                        date: "2022-04-18"
                        sport:  "tennis"
                        id: 5
                        free_slots: "7:00,8:00,9:00,13:00,14:00,20:00"
        '405':
          description: GET method required
    post:
      description: add new sport name
      requestBody:
        description: JSON for a new sport name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sport'
            example:
              name: "squash"
      responses:
        '200':
          description: New sport successfully added to the database
        '409':
          description: Sport already exists
        '401':
          description: Incomplete request - missing fields
        '405':
          description: POST method required
  /sports/{sport_name}:
    delete:
      description: Delete sport by sport name
      parameters:
        - $ref: '#/components/parameters/sport_name'
      responses:
        '200':
          description: Deleted successfully
        '405':
          description: DELETE method required
        '409':
          description: Sport not found
  /sports/{sport_name}/courts/:
    post:
      description: add new court
      parameters:
        - $ref: '#/components/parameters/sport_name'
      requestBody:
        description: JSON for a new court
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Court'
            example:
              sport_name: "badmimton"
              court_no: 1
              date: "2022-04-18"
              free_slots: "7:00,8:00,9:00,10:00,11:00,12:00,13:00,14:00,15:00,16:00,17:00,18:00,19:00,20:00,21:00,22:00"
      responses:
        '200':
          description: Court added successfully
        '409':
          description: Data already exists
        '401':
          description: Incomplete request - missing fields
        '405':
          description: POST method required
    get:
      description: Get details of all courts on a sport for the selected date
      parameters:
        - $ref: '#/components/parameters/sport_name'
        - $ref: '#/components/parameters/input_date'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              example:
                sport: "tennis"
                date: "2022-04-16"
                courts:
                  - court_no: 1
                    free_slots: "7:00,9:00,10:00,13:00,:0180"
                  - court_no: 2
                    free_slots: "7:00,8:00,11:00,16:00,21:00"
                  - court_no: 3
                    free_slots: "7:00,8:00,11:00,13:00,20:00"
        '405':
          description: GET method required
        '409':
          description: Invalid sport or input date
  /sports/{sport_name}/courts/{court_no}/:
    delete:
      description: Delete all records of a court (which is not maintained anymore)
      parameters:
        - $ref: '#/components/parameters/sport_name'
        - $ref: '#/components/parameters/court_no'
      responses:
        '200':
          description: Deleted successfully
        '405':
          description: DELETE method required
        '409':
          description: Sport or court not found
    put:
      description: Edit freeslot of a court after user confirmation
      parameters:
        - $ref: '#/components/parameters/sport_name'
        - $ref: '#/components/parameters/court_no'
      requestBody:
        description: JSON for a updating freeslot of a court
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Freeslot'
            example:
              date: "2022-03-18"
              start: "15:00"
              end: "18:00"
      responses:
        '200':
          description: Court updated successfully
        '409':
          description: Invaled sport name, input date or court number
        '405':
          description: PUT method required
  /reservations/{username}:
    get:
      description: Get all reservations from one user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              example:
                - book_id: 1
                  start: "17:00"
                  end: "19:00"
                  court_info:
                    court_no: 5
                    date: "2022-04-17"
                    sport:  "badminton"
                - book_id: 2
                  start: "13:00"
                  end: "14:00"
                  court_info:
                    court_no: 3
                    date: "2022-04-18"
                    sport: "tennis"
        '405':
          description: GET method required
    post:
      description: add new reservation
      parameters:
        - $ref: '#/components/parameters/username'
      requestBody:
        description: JSON for a new reservation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservations'
            example:
              court_id: 18
              start: "9:00"
              end: "11:00"
      responses:
        '200':
          description: Reservation successfully added
        '409':
          description: Username not found
        '401':
          description: Incomplete request - missing fields
        '405':
          description: POST method required
  /reservations/{book_id}:
    delete:
      description: Delete user by booking id
      parameters:
        - $ref: '#/components/parameters/book_id'
      responses:
        '200':
          description: Deleted successfully
        '405':
          description: DELETE method required
        '409':
          description: Booking Id not found